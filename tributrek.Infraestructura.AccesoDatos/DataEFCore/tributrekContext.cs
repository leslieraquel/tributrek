// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace tributrek.Infraestructura.AccesoDatos;

public partial class tributrekContext : DbContext
{
    public tributrekContext()
    {
    }

    public tributrekContext(DbContextOptions<tributrekContext> options)
        : base(options)
    {
    }

    public virtual DbSet<tri_actividades> tri_actividades { get; set; }

    public virtual DbSet<tri_actividades_dias> tri_actividades_dias { get; set; }

    public virtual DbSet<tri_categoria> tri_categoria { get; set; }

    public virtual DbSet<tri_dias_itinerario> tri_dias_itinerario { get; set; }

    public virtual DbSet<tri_itinerario> tri_itinerario { get; set; }

    public virtual DbSet<tri_nivel> tri_nivel { get; set; }

    public virtual DbSet<tri_paquete_itinerario> tri_paquete_itinerario { get; set; }

    public virtual DbSet<tri_rol> tri_rol { get; set; }

    public virtual DbSet<tri_usuario> tri_usuario { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-RAQUEL;Initial Catalog=tributrek;Integrated Security=True;Encrypt=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<tri_actividades>(entity =>
        {
            entity.HasKey(e => e.tri_acti_id).HasName("PK_ID_ACTIVIDAD");

            entity.Property(e => e.tri_acti_descripcion).HasColumnType("text");
            entity.Property(e => e.tri_acti_estado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1")
                .IsFixedLength();
            entity.Property(e => e.tri_acti_fecha_creacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.tri_acti_fecha_mod).HasColumnType("datetime");
        });

        modelBuilder.Entity<tri_actividades_dias>(entity =>
        {
            entity.HasKey(e => e.tri_acti_dia_id).HasName("PK_ID_ACTIVIDADES_DIAS");

            entity.HasOne(d => d.tri_acti).WithMany(p => p.tri_actividades_dias)
                .HasForeignKey(d => d.tri_acti_id)
                .HasConstraintName("FK_ID_ACTIVIDAD");

            entity.HasOne(d => d.tri_dia_itineNavigation).WithMany(p => p.tri_actividades_dias)
                .HasForeignKey(d => d.tri_dia_itine)
                .HasConstraintName("FK_ID_DIA_ITINERARIO");
        });

        modelBuilder.Entity<tri_categoria>(entity =>
        {
            entity.HasKey(e => e.tri_cat_id).HasName("PK__tri_cate__A77703F512EBFF84");

            entity.Property(e => e.tri_cat_estado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1")
                .IsFixedLength();
            entity.Property(e => e.tri_cat_nombre)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.tri_fecha_creacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.tri_fecha_mod).HasColumnType("datetime");
        });

        modelBuilder.Entity<tri_dias_itinerario>(entity =>
        {
            entity.HasKey(e => e.tri_dia_itine).HasName("PK_ID_DIAS_ITINERARIO");

            entity.HasOne(d => d.tri_idtri_paq_itiNavigation).WithMany(p => p.tri_dias_itinerario)
                .HasForeignKey(d => d.tri_idtri_paq_iti)
                .HasConstraintName("FK_ID_PAQUETEITINERARIO");
        });

        modelBuilder.Entity<tri_itinerario>(entity =>
        {
            entity.HasKey(e => e.tri_itine_id).HasName("PK__tri_itin__E91591AEB922944C");

            entity.Property(e => e.tri_itine_estado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1")
                .IsFixedLength();
            entity.Property(e => e.tri_itine_fecha_creacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.tri_itine_fecha_mod).HasColumnType("datetime");
            entity.Property(e => e.tri_itine_nombre)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.tri_itine_cat).WithMany(p => p.tri_itinerario)
                .HasForeignKey(d => d.tri_itine_cat_id)
                .HasConstraintName("FK__tri_itine__tri_i__49C3F6B7");

            entity.HasOne(d => d.tri_itine_niv).WithMany(p => p.tri_itinerario)
                .HasForeignKey(d => d.tri_itine_niv_id)
                .HasConstraintName("FK__tri_itine__tri_i__4AB81AF0");

            entity.HasOne(d => d.tri_itine_usu).WithMany(p => p.tri_itinerario)
                .HasForeignKey(d => d.tri_itine_usu_id)
                .HasConstraintName("FK__tri_itine__tri_i__48CFD27E");
        });

        modelBuilder.Entity<tri_nivel>(entity =>
        {
            entity.HasKey(e => e.tri_niv_id).HasName("PK__tri_nive__CA29733D80B58729");

            entity.Property(e => e.tri_niv_descripcion)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.tri_niv_dificultad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.tri_niv_estado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1")
                .IsFixedLength();
        });

        modelBuilder.Entity<tri_paquete_itinerario>(entity =>
        {
            entity.HasKey(e => e.idtri_paq_iti).HasName("PK_ID_PAQUETE");

            entity.Property(e => e.tri_paq_fecha_fin).HasColumnType("datetime");
            entity.Property(e => e.tri_paq_fecha_inicio).HasColumnType("datetime");
            entity.Property(e => e.tri_paq_iti_descripcion).HasColumnType("text");
            entity.Property(e => e.tri_paq_nombre)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.tri_paq_idtri_itineNavigation).WithMany(p => p.tri_paquete_itinerario)
                .HasForeignKey(d => d.tri_paq_idtri_itine)
                .HasConstraintName("FK_ID_ITINERARIO");
        });

        modelBuilder.Entity<tri_rol>(entity =>
        {
            entity.HasKey(e => e.tri_rol_id).HasName("PK__tri_rol__BD1DE99DD28BAB55");

            entity.Property(e => e.tri_rol_estado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1")
                .IsFixedLength();
            entity.Property(e => e.tri_rol_nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<tri_usuario>(entity =>
        {
            entity.HasKey(e => e.tri_usu_id).HasName("PK__tri_usua__E748467EE636DDAF");

            entity.Property(e => e.tri_usu_apellido)
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.tri_usu_clave)
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.tri_usu_correo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.tri_usu_estado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1")
                .IsFixedLength();
            entity.Property(e => e.tri_usu_nombre_usuario)
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.tri_usu_nombres)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.tri_usu_rol).WithMany(p => p.tri_usuario)
                .HasForeignKey(d => d.tri_usu_rol_id)
                .HasConstraintName("FK__tri_usuar__tri_u__3B75D760");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}